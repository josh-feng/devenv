" =========================================================================
set encoding=utf-8
set nocompatible              " be iMproved, required
" set shellcmdflag=-c
" neocomlete https://github.com/Shougo/neocomplete.vim
let g:neocomplete#enable_at_startup = 1
au WinLeave * hi StatusLine ctermfg=darkgrey
au WinEnter * hi StatusLine ctermfg=green
" au WinEnter * hi StatusLine ctermfg=cyan
" =======================  PLUGINS SETTINGS  ==============================
" ----- " vundle " ----- {{{ plugin manager: need vim reload
" https://github.com/VundleVim/Vundle.vim
filetype off                  " required
if filereadable('~/.vim/bundle/Vundle.vim')

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin() " {{{
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')
" Keep Plugin commands between vundle#begin/end.

" plugin on GitHub repo " let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
" Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'

" https://github.com/vim-pandoc/vim-pandoc
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'


Plugin 'suan/vim-instant-markdown', {'rtp': 'after'}


" vimwiki <-- markdown
" Plugin 'vimwiki/vimwiki'

" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'} " sparkup script is in a subdirectory
" Plugin 'ascenator/L9', {'name': 'newL9'} " Install L9 and avoid a Naming conflict

" Plugin 'git://git.wincent.com/command-t.git'
" Plugin 'file:///home/gmarik/path/to/plugin' " git repos on local machine
call vundle#end() " }}}

" --- " vimwiki " --- {{{
" default file @ ~/vimwiki/index.wiki
" markdown '='
" let g:vimwiki_key_mappings =
" \ {
" \ 'headers': 0,
" \ }
" folding expr is better than syntax
" let g:vimwiki_folding = 'syntax'
" let g:vimwiki_folding = 'expr'
" au FileType vimwiki set filetype=vimwiki.markdown
"  }}}

" --- " instant-markdown " --- {{{
" InstantMarkdownPreview
" InstantMarkdownStop
"let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0
"let g:instant_markdown_open_to_the_world = 1
"let g:instant_markdown_allow_unsafe_content = 1
"let g:instant_markdown_allow_external_content = 0
let g:instant_markdown_mathjax = 1
"let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
let g:instant_markdown_autoscroll = 0
"let g:instant_markdown_port = 8090
"let g:instant_markdown_python = 1
" }}}

" --- " pandoc " --- {{{
" :Pandoc [option]*
" let g:pad#dir = "~/documents/notes"
" let g:pad#local_dir = "notes"
" let g:pandoc#after#modules#enabled = ["nrrwrgn", "ultisnips"]
" let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "literatehaskell=lhaskell", "bash=sh"]
let g:pandoc#syntax#codeblocks#embeds#langs = ["lua", "cpp", "bash=sh", "vim", "make", "html", "sql", "java"]
let g:pandoc#spell#enabled = 1
" let g:pandoc#folding#mode = ["expr"]
" let g:pandoc#folding#mode = "syntax"
let g:pandoc#folding#fold_fenced_codeblocks = 1
" let g:pandoc#folding#fold_vim_markers = 1
" let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
" let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#modules#enabled = ["formatting", "folding"]
" let g:pandoc#formatting#mode = "h"
" }}}

" --- " tagbar " --- {{{
" let g:tagbar_ctags_bin = 'ctags'   "ctags 程序的路径
" let g:tagbar_width = 30            "窗口宽度设置为 30
let g:tagbar_width = 36            "窗口宽度设置为 30
let g:tagbar_left = 0              "设置在 vim 左边显示
" let g:tagbar_map_openfold = "zv"   "按 zv 组合键打开标签，默认 zc 关闭标签
" let g:tagbar_zoomwidth = NERDTreeWinSizeMax
" let g:tagbar_vertical = winheight(0)/2
" ---
" let g:tagbar_autofocus = 0
" let g:tagbar_autoclose = 0
" let g:tagbar_sort = 1
" let g:tagbar_compact = 0
" let g:tagbar_expand = 0
" let g:tagbar_singleclick = 0
" let g:tagbar_foldlevel = 99
" let g:tagbar_autoshowtag = 0
" let g:tagbar_updateonsave_maxlines = 5000
" let g:tagbar_systemenc = &encoding
" if !exists('g:tagbar_iconchars')
"     if has('multi_byte') && has('unix') && &encoding == 'utf-8' &&
"         \ (empty(&termencoding) || &termencoding == 'utf-8')
"         let g:tagbar_iconchars = ['▶', '▼']
"     else
"         let g:tagbar_iconchars = ['+', '-']
"     endif
" endif
" augroup TagbarSession
"     autocmd!
"     autocmd SessionLoadPost * nested call tagbar#RestoreSession()
" augroup END
" " Commands
" command! -nargs=0 TagbarToggle              call tagbar#ToggleWindow()
" command! -nargs=? TagbarOpen                call tagbar#OpenWindow(<f-args>)
" command! -nargs=0 TagbarOpenAutoClose       call tagbar#OpenWindow('fc')
" command! -nargs=0 TagbarClose               call tagbar#CloseWindow()
" command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)
" command! -nargs=0 TagbarShowTag             call tagbar#OpenParents()
" command! -nargs=1 TagbarGetTypeConfig       call tagbar#gettypeconfig(<f-args>)
" command! -nargs=? TagbarDebug               call tagbar#StartDebug(<f-args>)
" command! -nargs=0 TagbarDebugEnd            call tagbar#StopDebug()
" }}}

endif
filetype plugin indent on    " or 'filetype plugin on'
" --- Brief help ---
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ
" }}}
" =========================================================================
" ----- " IDE " ----- {{{ vundle/tagbar

" ----- "netrw" -----
" let g:netrw_altv = 0
" let g:netrw_banner = 0
" let g:netrw_browse_split = 2
" let g:netrw_liststyle = 1
" let g:netrw_winsize = 24
" let g:netrw_list_hide = '.*\.swp$'

autocmd StdinReadPre * let s:std_in = 1

" ----- "deoplete" -----
" let g:deoplete#enable_at_startup = 1

" ----- " ctags " -----
let g:tagbar_ctags_bin = "/usr/bin/ctags"
" ------------------- " new-omni-completion " ------------------- {{{
" insert mode:
"   c-x c-o --> ?
"   c-x c-i --> function/variable name
"   c-x c-f --> directory
"   ^X..... (^I:insert, ^L:library)
set completeopt=longest,menu
"   c-p ?
" NeoCompleteToggle
" }}}

" markdown
" au FileType md       :NeoCompleteDisable<CR>

" }}}
" =========================================================================
" ----- " Spell " ----- {{{
" [s    search back
" ]s    search forth
" zg    add word under cursor
" set spell spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add

" set nospell
" language setting en or fr
" set spelllang=fr
" }}}
" =========================================================================
" ----- " Color " ----- {{{
set background=dark   " dark/light

" ref: http://http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
" set t_Co=256
" if (&t_Co == 256 || &t_Co == 88) && !has('gui_running') &&
"   \ filereadable(expand("$HOME/.vim/plugin/guicolorscheme.vim"))
"   runtime! plugin/guicolorscheme.vim
"   GuiColorScheme rastafari
" else
"   colorscheme rastafari
" endif
if (&t_Co == 256) " rxvt-unicode-256color
    " hi comment ctermfg=238 ctermbg=black guifg=darkgray gui=bold
    " hi comment ctermfg=240 ctermbg=black guifg=darkgray gui=bold
    hi comment ctermfg=242 ctermbg=black guifg=darkgray gui=bold
else
    " colorscheme evening
    " hi comment ctermfg=darkgrey ctermbg=none
    " hi comment cterm=inverse ctermfg=darkgrey ctermbg=none
    " hi comment cterm=none ctermfg=lightblue ctermbg=none
    " hi comment cterm=none ctermfg=lightgrey ctermbg=black
    " hi comment cterm=none ctermbg=darkgrey ctermfg=none
    " hi comment term=none cterm=reverse ctermfg=darkblue ctermbg=darkgrey

    " hi Comment term=bold cterm=NONE ctermfg=Cyan ctermbg=Blue gui=NONE guifg=Blue guibg=NONE
    " hi Comment term=bold cterm=NONE ctermfg=Black ctermbg=DarkBlue gui=NONE guifg=Blue guibg=NONE

    hi comment ctermfg=darkblue ctermbg=black guifg=gray gui=bold
    "hi comment ctermfg=darkgrey ctermbg=black guifg=darkgray gui=bold
endif

" if &term =~ "xterm"
    " ICEWM XTERM
    " hi comment cterm=none ctermfg=blue ctermbg=none
    " highlight Folded term=bold ctermbg=blue ctermfg=blue guibg=grey guifg=blue
    " highlight FoldColumn guibg=darkgrey guifg=white

    " GNOME-TERM
    " highlight Folded term=bold ctermbg=blue ctermfg=black guibg=grey guifg=blue
    " highlight FoldColumn guibg=darkgrey guifg=white
    " highlight Folded term=bold ctermbg=blue ctermfg=black guibg=grey guifg=blue
" endif

highlight Folded term=bold ctermbg=blue ctermfg=cyan guibg=grey guifg=blue
highlight FoldColumn guibg=darkgrey guifg=white

" http://tnerual.eriogerg.free.fr/vimqrc.html
" }}}

set foldenable
" =========================================================================
" vim: ts=4 sw=4 sts=4 et foldenable fdm=marker fmr={{{,}}} fdl=1
