" ====================  GLOBAL SETTINGS  ============================
" ----- basic settings ----- {{{
" set runtimepath=/usr/share/vim/@VIMCUR@,~/.vim
" verbose set ai? cin? cink? cino? si? inde? indk?
" setlocal nocindent indentexpr=
" set fileencodings=big5,gbk,gb18030,utf-8,iso8859-1,default
set nocompatible encoding=utf-8
filetype plugin indent on
syntax on
set hidden

set tabstop=4 shiftwidth=4 softtabstop=4 expandtab
set autoindent smartindent mouse=
set showmode hlsearch
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

if has('clipboard') | set clipboard=unnamed | endif
autocmd StdinReadPre * let s:std_in = 1

" let &t_EI = "\<Esc>]12;red\x7" " use a red cursor otherwise
" let &t_ve = "[34h[?25h"

" word / filename under cursor <cfile> <cword>
" variable 'isfname' is for filename setting
" variable 'iskeyword' is for searching/selection
" set iskeyword+=\.                 " include .
" set iskeyword-=\.                 " disable it
" set isk=@,48-57,_,128-167,224-235
" set isk=@,48-57,_,192-255,#       " make
" set isk=@,46-57,_,192-255         " make (include /)
" set isk=@,48-57,_
" set isk=a-z,A-Z,48-57,_,.,-,>     " C/C++

":e ++ff=dos
":w ++ff=unix
":set fileformat=unix to convert from dos to unix
" ======================  VIM DIFF MODE  ============================
" vimdiff/viewdiff mode {{{
" do    get change form the other
" dp    put change to the other
" ]c    next diff
" [c    prev diff
if &diff | set scrollbind | endif " }}}

function! RidSpace() " clean space {{{
    if &filetype == 'make'
        silent! exec '%s/\(^\)\@<!\t/    /g'
    else
        retab
    end
    silent! exec '%s/\s\+$//g'
    set foldlevel=0 foldenable
endfunction " }}}
fu! CustomFoldText() " custom fold display {{{
    let line1 = getline(v:foldstart)
    let lineCnt = line("$")
    let w = winwidth(0) - &foldcolumn - (&number ? (strwidth(printf("%d", lineCnt)) + 2) : 0)
    let fldCnt = 1 + v:foldend - v:foldstart
    let fldStr = printf(" %d+%d %.1f%%", fldCnt, v:foldlevel, (fldCnt * 1.0) / lineCnt * 100)
    let expStr = repeat(".", w - strwidth(line1.fldStr))
    return strpart(line1, 0, w - strwidth(expStr.fldStr)).expStr.fldStr
endf " }}}
set foldenable foldtext=CustomFoldText()

" Spell {{{
" [s    search back
" ]s    search forth
" zg    add word under cursor
" set spell spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add

" set nospell
" set spelllang=fr " en or fr
" }}}
" }}}
" ----- color ----- {{{
set background=dark   " dark/light

hi CursorLine   ctermbg=darkgrey
" hi CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

if (&t_Co == 256) " rxvt-unicode-256color
    hi comment ctermfg=242 ctermbg=NONE guibg=NONE guifg=darkgrey
else " colorscheme evening
    hi comment ctermfg=darkblue ctermbg=black guifg=gray gui=bold
endif
hi Folded term=bold ctermbg=blue ctermfg=cyan guibg=grey guifg=blue
hi FoldColumn guibg=darkgrey guifg=white

au WinLeave * highlight StatusLine ctermfg=darkgrey
au WinEnter * highlight StatusLine ctermfg=green
" }}}
" ----- binding ----- {{{
nmap ; :!
nnoremap <silent> <Bslash><Bslash> :call RidSpace()<CR>
let mapleader = ","

nnoremap <silent> <Leader>, :set wrap!<CR>

" TODO www/lynx/links2/gitbook: gx: xdg-open
nnoremap <silent> w /\[[^\]]*\]([^)]*)<CR>
" nnoremap W    " markdown new

" nnoremap <F9> :set invpaste paste?<CR>
set pastetoggle=<F9>

nnoremap t <C-w>
nmap <silent> Tc :tabnew<CR>
nmap <silent> Tn :tabmove +1<CR>
nmap <silent> Tp :tabmove -1<CR>

" map <F2> a<C-R>=strftime("%c")<CR><Esc>
" map <F3> :let @@=expand('<cword>')<CR> " copy to "
" map <F4> :let @+=expand('<cword>')<CR> " copy to selection
nn <silent> <F2> :set invcursorcolumn invcursorline wrap! nu!<CR>
nn <silent> <F3> :set invcursorline rnu!<CR>
nn <silent> <F4> :copen<CR><c-w>J

" c-j generate 'NL'
inoremap <C-h> <c-o>h
inoremap <C-j> <c-o>j
inoremap <C-k> <c-o>k
inoremap <C-l> <c-o>l

inoremap <F2> <C-R>=strftime("%Y/%m/%d")<CR>
" inoremap <F3>
inoremap <F4> <C-v>u

" Useful bubble text normal mapping for arrow keys.
" vnoremap <DOWN>  xjP`[<C-V>`]
" vnoremap <UP>    xkP`[<C-V>`]
" vnoremap <LEFT>  xhP`[<C-V>`]
" vnoremap <RIGHT> xlP`[<C-V>`]

" vnoremap m :!cconv -f big5 -t utf8<CR>
" vnoremap M :!cconv -f gb18030 -t utf8<CR>
" vnoremap H
" vnoremap L
" vnoremap a
" vnoremap i

vnoremap ` :w !sh<CR>
vnoremap t !column -t<CR>
vnoremap <silent> \ :s/\s\+$//g<CR>
vnoremap f :s/\(\S\)\s\+/\1:/g<CR>
vnoremap F :s/:/ /g<CR>
vnoremap o :!/usr/bin/nl -n rz<CR>

" &cms &com: comment block/comment lines
function! AddComment() " {{{
    " register @"
    " echo mode() visualmode(): v/V/^V
    " echo split(&cms, '%s')[0]
    let l:c = split(&cms, '%s')
    let l:s = l:c[0].' '
    let l:e = ''
    if len(l:c) > 1 | let l:e = ' '.l:c[1] | endif
    if visualmode() == 'v'
        let @" = l:s.@".l:e
    elseif visualmode() == "V"
        let @" = substitute(@", '[^\n]\+', l:s.'\0'.l:e, 'g')
    " else " ^V not support
    endif
    normal P
    unlet l:c l:s l:e
    " if mode()=="v"
    "     let [line_start, column_start] = getpos("v")[1:2]
    "     let [line_end, column_end] = getpos(".")[1:2]
    " else
    "     let [line_start, column_start] = getpos("'<")[1:2]
    "     let [line_end, column_end] = getpos("'>")[1:2]
    " end
    " let lines = getline(line_start, line_end)
    " if len(lines) == 0 | return '' | endif
    " vnoremap <F2> :<C-u>for line in getline("'<", "'>") \| execute line \| endfor<CR>
endfunction " }}}
vnoremap <silent> <F2> x:call AddComment()<CR>
" }}}
" ----- file support ----- {{{
" Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif

autocmd BufWritePost $MYVIMRC source $MYVIMRC

augroup filetype
    au BufRead,BufNewFile *akefile*     set filetype=make
    au BufRead,BufNewFile .*akefile*    set filetype=make
    au BufRead,BufNewFile *.rml         set filetype=rml
    au BufRead,BufNewFile *.txt         setf text
augroup END

au FileType vim           let&l:kp=':help'
au FileType python        set kp=pydoc
au FileType c,cpp,h,hpp   set kp=man\ -S\ 3p:2:3
au FileType perl          set kp=perldoc

au FileType text,tex,bib,mail,rml,pandoc set kp=sdcv

au FileType c,cpp         set ts=2 sw=2

autocmd Syntax c,cpp,tcl,xml    set foldmethod=marker
autocmd Syntax xml              syn match OotclComment "//.*"
autocmd Syntax xml              hi def link OotclComment Comment

" markdown: TODO buffer/ftplug
function! MDheader(mode) " markdown header {{{
    let l:l = strlen(getline('.'))
    if l:l == 0
        put =repeat(a:mode == 1?'-':'*', 6)
    else
        put =repeat(a:mode == 1?'-':'=', l:l)
    endif
    silent normal! o
    unlet l:l
endfunction " }}}
nnoremap <silent> <F5> :call MDheader(0)<CR>
nnoremap <silent> <F6> :call MDheader(1)<CR>
inoremap <F5> <Esc>:call MDheader(0)<CR>i
inoremap <F6> <Esc>:call MDheader(1)<CR>i
" }}}
" ====================  PLUGINS SETTINGS  ===========================
" ----- vundle ----- {{{ plugin manager: need vim reload
if has('nvim')
    let g:VCFGHOME = $HOME."/.config/nvim/bundle/Vundle.vim"
else
    let g:VCFGHOME = $HOME."/.vim/bundle/Vundle.vim"
endif
" https://github.com/VundleVim/Vundle.vim " create ~/.vim/bundle/ folder
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
filetype off " required
if filereadable(g:VCFGHOME."/README.md")

if has('nvim')
    set rtp+=~/.config/nvim/bundle/Vundle.vim
else
    set rtp+=~/.vim/bundle/Vundle.vim
endif
call vundle#begin() " {{{ plugin on GitHub repo https://github.com/
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
" --- " pandoc " --- {{{
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
" :Pandoc [option]*
" let g:pad#dir = "~/documents/notes"
" let g:pad#local_dir = "notes"
" let g:pandoc#after#modules#enabled = ["nrrwrgn", "ultisnips"]
" let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "literatehaskell=lhaskell", "bash=sh"]
let g:pandoc#syntax#codeblocks#embeds#langs = ["lua", "cpp", "bash=sh", "vim", "make", "html", "sql", "java", "javascript"]
let g:pandoc#spell#enabled = 1
" let g:pandoc#folding#mode = ["expr"]
" let g:pandoc#folding#mode = "syntax"
let g:pandoc#folding#fold_fenced_codeblocks = 1
" let g:pandoc#folding#fold_vim_markers = 1
" let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
" let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#modules#enabled = ["formatting", "folding"]
" let g:pandoc#formatting#mode = "h"
" }}}
" --- " tagbar " --- {{{
Plugin 'majutsushi/tagbar'
" let g:tagbar_ctags_bin = 'ctags'   "ctags Á®ãÂ∫èÁöÑË∑ØÂæÑ
" let g:tagbar_width = 30            "Á™óÂè£ÂÆΩÂ∫¶ËÆæÁΩÆ‰∏∫ 30
let g:tagbar_width = 28            "Á™óÂè£ÂÆΩÂ∫¶ËÆæÁΩÆ‰∏∫ 30
let g:tagbar_left = 0              "ËÆæÁΩÆÂú® vim Â∑¶ËæπÊòæÁ§∫
" let g:tagbar_map_openfold = "zv"   "Êåâ zv ÁªÑÂêàÈîÆÊâìÂºÄÊ†áÁ≠æÔºåÈªòËÆ§ zc ÂÖ≥Èó≠Ê†áÁ≠æ
" let g:tagbar_zoomwidth = NERDTreeWinSizeMax
" let g:tagbar_vertical = winheight(0)/2
" ---
" let g:tagbar_autofocus = 0
" let g:tagbar_autoclose = 0
" let g:tagbar_sort = 1
" let g:tagbar_compact = 0
" let g:tagbar_expand = 0
" let g:tagbar_singleclick = 0
" let g:tagbar_foldlevel = 99
" let g:tagbar_autoshowtag = 0
" let g:tagbar_updateonsave_maxlines = 5000
" let g:tagbar_systemenc = &encoding
" if !exists('g:tagbar_iconchars')
"     if has('multi_byte') && has('unix') && &encoding == 'utf-8' &&
"         \ (empty(&termencoding) || &termencoding == 'utf-8')
"         let g:tagbar_iconchars = ['‚ñ∂', '‚ñº']
"     else
"         let g:tagbar_iconchars = ['+', '-']
"     endif
" endif
" augroup TagbarSession
"     autocmd!
"     autocmd SessionLoadPost * nested call tagbar#RestoreSession()
" augroup END
" " Commands
" command! -nargs=0 TagbarToggle              call tagbar#ToggleWindow()
" command! -nargs=? TagbarOpen                call tagbar#OpenWindow(<f-args>)
" command! -nargs=0 TagbarOpenAutoClose       call tagbar#OpenWindow('fc')
" command! -nargs=0 TagbarClose               call tagbar#CloseWindow()
" command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)
" command! -nargs=0 TagbarShowTag             call tagbar#OpenParents()
" command! -nargs=1 TagbarGetTypeConfig       call tagbar#gettypeconfig(<f-args>)
" command! -nargs=? TagbarDebug               call tagbar#StartDebug(<f-args>)
" command! -nargs=0 TagbarDebugEnd            call tagbar#StopDebug()
" }}}
" --- " vim-indent-guides " --- {{{
Plugin 'nathanaelkane/vim-indent-guides'
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
nmap <silent> <Leader>i <Plug>IndentGuidesToggle
" }}}
" --- " coc " --- {{{
" https://github.com/neoclide/coc.nvim (conquer of completion)
" https://github.com/neoclide/coc.nvim/wiki/Language-servers
" ~/.config/coc
" ~/.vim/coc-settings.json
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
    \ 'coc-snippets',
    \ 'coc-pairs',
    \ 'coc-json',
    \ 'coc-tsserver',
    \ 'coc-java',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-pyright',
    \ 'coc-clangd',
    \ ]
set nobackup nowritebackup
let g:coc_disable_startup_warning = 1
" don't give |ins-comletion-menu| messages
set shortmess+=c
inoremap <silent><expr> <s-space> coc#refresh()
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for goto/search gd/gy/gi/gr
nmap <silent> gl <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gx <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call Show_doc()<CR>
function! Show_doc ()
    if (index(['vim', 'help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!'.&keywordprg." ".expand('<cword>')
    endif
endfunction

command! -nargs=0 Tsc    :CocCommand tsserver.watchBuild

" snippets
imap <C-i> <Plug>(coc-snippets-expand)
vmap <C-o> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<c-n>'
let g:coc_snippet_prev = '<c-p>'
" }}}

" autocmd FileType java setlocal omnifunc=javacomplete#Complete
set completeopt=noinsert,menuone,noselect
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Plugin 'git://git.wincent.com/command-t.git'
" Plugin 'file:///path/to/plugin' " git repos on local machine
call vundle#end() " }}}

endif
filetype plugin indent on    " or 'filetype plugin on'
" --- Brief help --- see :h vundle for more details or wiki for FAQ
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" }}}
" NOTE: {{{
" ====================  GENERAL INFO  ===============================
" :!col -b " to ignore the control characters
"
" gv    go back to previous visual selection
" va{   visual selection {
" di"   delete in "
"
" environment variables start w/ $ : ex. $HOME
" ab -- general abbreviation; ca -- command line mode abbreviation
" ca mkix   !makeindex
" ======================  PATTERN REGX  =============================
" :g/\<condition\>\%(\s\+number\>\)\@!/p
"   \<         begin of word (don't match "precondition")
"   condition  matches itself
"   \>         end of word (don't match "conditional")
"   \%(        start subpattern
"   \s\+       any number of whitespace (at least one)
"   number     matches itself
"   \>         end of word ("condition numbering" is different)
"   \)         end subpattern
"   \@!        subpattern must NOT match
"
" :s/\([.0-9]*\s\+\)\{3}/&\r/g
"   &   matched pattern
"
" insert <CR> after pattern example: s/\(\S\+\s\+\)\{76}/\0\r/g
" :s/\([.0-9]* \)\{76}/&\r/g    " after matching 76 times
" ===================================================================
" use \r to insert linebreak
"   /[(,)]
"   :s//\r&/g
" =======================  REGISTERS  ===============================
" : help registers
" '='   the expression register: you are prompted (see |expression|)
"       When the result is a |List| the items are used as lines.
" =================================================================== }}}
" vim: ts=4 sw=4 sts=4 et foldenable fdm=marker fmr={{{,}}} fdl=1
