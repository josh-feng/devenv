" ====================  GLOBAL SETTINGS  ============================
" ----- basic settings ----- {{{
" set runtimepath=/usr/share/vim/@VIMCUR@,~/.vim
filetype plugin indent on
syntax on

set mouse=
set tabstop=4       " hard tab
set shiftwidth=4    " shift width
set softtabstop=4   " soft tab stop
set expandtab       " use space instead

":verbose set ai? cin? cink? cino? si? inde? indk?
" setlocal noautoindent nocindent nosmartindent indentexpr=

" set rnu!          " relativenumber
set showmode
set hlsearch
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

if has('clipboard')
    set clipboard=unnamed
endif

" ------- cursor line ------
highlight CursorLine   ctermbg=grey
" highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

" --------------------------
" if &term =~ "xterm\\|rxvt"
" let &t_EI = "\<Esc>]12;red\x7" " use a red cursor otherwise
" endif
" let &t_ve = "\<Esc>[34h\<Esc>[?25h"
" let &t_ve = "[34h[?25h"

" word / filename under cursor <cfile> <cword>
" variable 'iskeyword' is for searching/selection
" variable 'isfname' is for filename setting
" including '.' in searching should depend on file type
" set iskeyword+=\.     " include .
" set iskeyword-=\.     " disable it
"
" iskeyword --> string : searching and reconizing --> \k (local to buffer)
" set isk=@,48-57,_,128-167,224-235
" set isk=@,48-57,_,192-255,#       make
" set isk=@,46-57,_,192-255         make (include /)
" set isk=@,48-57,_
" set isk=a-z,A-Z,48-57,_,.,-,>     C/C++

":e ++ff=dos
":w ++ff=unix
":set fileformat=unix to convert from dos to unix
" =========================  VIM DIFF MODE  ===============================
" vimdiff/viewdiff mode {{{
" do    get change form the other
" dp    put change to the other
" ]c    next diff
" [c    prev diff
if &diff
    set scrollbind
endif " }}}

function! RidSpace() " clean space {{{
    if &filetype == 'make'
        silent! exec '%s/\(^\)\@<!\t/    /g'
    else
        retab
    end
    silent! exec '%s/\s\+$//g'
    set foldlevel=0 foldenable
endfunction " }}}
fu! CustomFoldText() " custom fold display {{{
    let line1 = getline(v:foldstart)
    let lineCnt = line("$")
    let w = winwidth(0) - &foldcolumn - (&number ? (strwidth(printf("%d", lineCnt)) + 2) : 0)
    let fldCnt = 1 + v:foldend - v:foldstart
    let fldStr = printf(" %d+%d %.1f%%", fldCnt, v:foldlevel, (fldCnt * 1.0) / lineCnt * 100)
    let expStr = repeat(".", w - strwidth(line1.fldStr))
    return strpart(line1, 0, w - strwidth(expStr.fldStr)).expStr.fldStr
endf " }}}
set foldenable
set foldtext=CustomFoldText()

" set fileencodings=big5,gbk,gb18030,utf-8,iso8859-1,default
set encoding=utf-8
set nocompatible              " be iMproved, required
autocmd StdinReadPre * let s:std_in = 1

au WinLeave * hi StatusLine ctermfg=darkgrey
au WinEnter * hi StatusLine ctermfg=green
" au WinEnter * hi StatusLine ctermfg=cyan
" }}}
" ----- file support ----- {{{
augroup filetype
    au BufRead,BufNewFile *akefile*     set filetype=make
    au BufRead,BufNewFile .*akefile*    set filetype=make
    au BufRead,BufNewFile *.rml         set filetype=rml
augroup END

au BufNewFile,BufRead *.txt             setf text

au FileType vim,help   let&l:kp=':help'
au FileType python     set kp=pydoc
au FileType c,cpp,h    set kp=man\ -S\ 3p:2:3
au FileType perl       set kp=perldoc

au FileType text,tex,bib,mail,rml,pandoc set kp=sdcv

au FileType c,cpp      set ts=2 sw=2

" Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif

autocmd Syntax c,cpp,tcl,xml    set foldmethod=marker
autocmd Syntax xml              syn match OotclComment "//.*"
autocmd Syntax xml              hi def link OotclComment Comment

autocmd BufWritePost $MYVIMRC source $MYVIMRC
" }}}
" ----- keybinding ----- {{{
nmap ; :!
nnoremap <silent> \ :call RidSpace()<CR>
let mapleader = ","

" TODO www/lynx/links2/gitbook: gx: xdg-open
" nnoremap w
" nnoremap W

nnoremap t <C-w>
nmap <silent> Tc :tabnew<CR>
nmap <silent> Tn :tabnext<CR>
nmap <silent> Tp :tabprev<CR>

" map <F2> a<C-R>=strftime("%c")<CR><Esc>
" map <F3> :let @@=expand('<cword>')<CR> " copy to "
" map <F4> :let @+=expand('<cword>')<CR> " copy to selection
" nnoremap <F4> i<C-R>=strftime("%Y/%m%d")<CR><Esc>
nnoremap <F2> :set invcursorcolumn invcursorline wrap! nu!<CR>
nnoremap <F3> :set invcursorline<CR>

inoremap <F2> <C-R>=strftime("%Y/%m%d")<CR>

" nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>

" search the link
nnoremap <silent> <Tab> /\[[^\]]*\]([^)]*)<CR>

" Useful bubble text normal mapping for arrow keys.
" nnoremap <UP> ddkP
" nnoremap <DOWN> ddp

" vnoremap <DOWN> xjP`[<C-V>`]
" vnoremap <UP> xkP`[<C-V>`]
" vnoremap <LEFT> xhP`[<C-V>`]
" vnoremap <RIGHT> xlP`[<C-V>`]

" vnoremap m :!cconv -f big5 -t utf8<CR>
" vnoremap M :!cconv -f gb18030 -t utf8<CR>
" vnoremap H
" vnoremap L
" vnoremap a
" vnoremap i

vnoremap ` :w !sh<CR>
vnoremap t !column -t<CR>
vnoremap <silent> , :s/\s\+$//g<CR>
vnoremap f :s/\(\S\)\s\+/\1:/g<CR>
vnoremap F :s/:/ /g<CR>
vnoremap o :!/usr/bin/nl -n rz<CR>

" &cms &com: comment block/comment lines
" vnoremap <F2> :call ToggleCommentBlock()<CR>
" vnoremap <F3> :call ToggleCommentLines()<CR>
" }}}
" ====================  PLUGINS SETTINGS  ===========================
" ----- vundle ----- {{{ plugin manager: need vim reload
if has('nvim')
    let g:VCFGHOME = $HOME."/.config/nvim/bundle/Vundle.vim"
else
    let g:VCFGHOME = $HOME."/.vim/bundle/Vundle.vim"
endif
" https://github.com/VundleVim/Vundle.vim " create ~/.vim/bundle/ folder
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
filetype off " required
if filereadable(g:VCFGHOME."/README.md")

if has('nvim')
    set rtp+=~/.config/nvim/bundle/Vundle.vim
else
    set rtp+=~/.vim/bundle/Vundle.vim
endif
call vundle#begin() " {{{ plugin on GitHub repo https://github.com/
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
" --- " pandoc " --- {{{
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
" :Pandoc [option]*
" let g:pad#dir = "~/documents/notes"
" let g:pad#local_dir = "notes"
" let g:pandoc#after#modules#enabled = ["nrrwrgn", "ultisnips"]
" let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "literatehaskell=lhaskell", "bash=sh"]
let g:pandoc#syntax#codeblocks#embeds#langs = ["lua", "cpp", "bash=sh", "vim", "make", "html", "sql", "java", "javascript"]
let g:pandoc#spell#enabled = 1
" let g:pandoc#folding#mode = ["expr"]
" let g:pandoc#folding#mode = "syntax"
let g:pandoc#folding#fold_fenced_codeblocks = 1
" let g:pandoc#folding#fold_vim_markers = 1
" let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
" let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#modules#enabled = ["formatting", "folding"]
" let g:pandoc#formatting#mode = "h"
" }}}
" --- " tagbar " --- {{{
Plugin 'majutsushi/tagbar'
" let g:tagbar_ctags_bin = 'ctags'   "ctags Á®ãÂ∫èÁöÑË∑ØÂæÑ
" let g:tagbar_width = 30            "Á™óÂè£ÂÆΩÂ∫¶ËÆæÁΩÆ‰∏∫ 30
let g:tagbar_width = 28            "Á™óÂè£ÂÆΩÂ∫¶ËÆæÁΩÆ‰∏∫ 30
let g:tagbar_left = 0              "ËÆæÁΩÆÂú® vim Â∑¶ËæπÊòæÁ§∫
" let g:tagbar_map_openfold = "zv"   "Êåâ zv ÁªÑÂêàÈîÆÊâìÂºÄÊ†áÁ≠æÔºåÈªòËÆ§ zc ÂÖ≥Èó≠Ê†áÁ≠æ
" let g:tagbar_zoomwidth = NERDTreeWinSizeMax
" let g:tagbar_vertical = winheight(0)/2
" ---
" let g:tagbar_autofocus = 0
" let g:tagbar_autoclose = 0
" let g:tagbar_sort = 1
" let g:tagbar_compact = 0
" let g:tagbar_expand = 0
" let g:tagbar_singleclick = 0
" let g:tagbar_foldlevel = 99
" let g:tagbar_autoshowtag = 0
" let g:tagbar_updateonsave_maxlines = 5000
" let g:tagbar_systemenc = &encoding
" if !exists('g:tagbar_iconchars')
"     if has('multi_byte') && has('unix') && &encoding == 'utf-8' &&
"         \ (empty(&termencoding) || &termencoding == 'utf-8')
"         let g:tagbar_iconchars = ['‚ñ∂', '‚ñº']
"     else
"         let g:tagbar_iconchars = ['+', '-']
"     endif
" endif
" augroup TagbarSession
"     autocmd!
"     autocmd SessionLoadPost * nested call tagbar#RestoreSession()
" augroup END
" " Commands
" command! -nargs=0 TagbarToggle              call tagbar#ToggleWindow()
" command! -nargs=? TagbarOpen                call tagbar#OpenWindow(<f-args>)
" command! -nargs=0 TagbarOpenAutoClose       call tagbar#OpenWindow('fc')
" command! -nargs=0 TagbarClose               call tagbar#CloseWindow()
" command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)
" command! -nargs=0 TagbarShowTag             call tagbar#OpenParents()
" command! -nargs=1 TagbarGetTypeConfig       call tagbar#gettypeconfig(<f-args>)
" command! -nargs=? TagbarDebug               call tagbar#StartDebug(<f-args>)
" command! -nargs=0 TagbarDebugEnd            call tagbar#StopDebug()
" }}}
" --- " vim-indent-guides " --- {{{
Plugin 'nathanaelkane/vim-indent-guides'
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
nmap <silent> <Leader>i <Plug>IndentGuidesToggle
" }}}
" --- " coc " --- {{{
" https://github.com/neoclide/coc.nvim (conquer of completion)
" https://github.com/neoclide/coc.nvim/wiki/Language-servers
" ~/.config/coc
" ~/.vim/coc-settings.json
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
    \ 'coc-snippets',
    \ 'coc-pairs',
    \ 'coc-json',
    \ 'coc-tsserver',
    \ 'coc-java',
    \ ]
set hidden " from readme
set nobackup nowritebackup
let g:coc_disable_startup_warning = 1
" don't give |ins-comletion-menu| messages
set shortmess+=c
inoremap <silent><expr> <s-space> coc#refresh()
" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" Remap keys for gotos
nmap <silent> gl <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gx <Plug>(coc-implementation)
nmap <silent> gb <Plug>(coc-references)

" nnoremap <silent> K :call Show_doc()<CR>
" function! Show_doc ()
"     if (index(['vim', 'help'], &filetype) >= 0)
"         execute 'h '.expand('<cword>')
"     elseif (coc#rpc#ready())
"         call CocActionAsync('doHover')
"     else
"         execute '!'.&keywordprg." ".expand('<cword>')
"     endif
" endfunction

" snippets
imap <C-i> <Plug>(coc-snippets-expand)
vmap <C-o> <Plug>(coc-snippets-select)
let g:coc_snippet_next = '<c-n>'
let g:coc_snippet_prev = '<c-p>'
" }}}

" autocmd FileType java setlocal omnifunc=javacomplete#Complete
set completeopt=noinsert,menuone,noselect
inoremap <c-c> <ESC>
inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Plugin 'git://git.wincent.com/command-t.git'
" Plugin 'file:///path/to/plugin' " git repos on local machine
call vundle#end() " }}}

endif
filetype plugin indent on    " or 'filetype plugin on'
" --- Brief help --- see :h vundle for more details or wiki for FAQ
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" }}}
" ===================================================================
" ----- Spell ----- {{{
" [s    search back
" ]s    search forth
" zg    add word under cursor
" set spell spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add

" set nospell
" language setting en or fr
" set spelllang=fr
" }}}
" ----- Color ----- {{{
set background=dark   " dark/light
if (&t_Co == 256) " rxvt-unicode-256color
    hi comment ctermfg=242 ctermbg=black guifg=darkgray gui=bold
else " colorscheme evening
    " hi Comment term=bold cterm=NONE ctermfg=Cyan ctermbg=Blue gui=NONE guifg=Blue guibg=NONE
    hi comment ctermfg=darkblue ctermbg=black guifg=gray gui=bold
endif
highlight Folded term=bold ctermbg=blue ctermfg=cyan guibg=grey guifg=blue
highlight FoldColumn guibg=darkgrey guifg=white
" }}}
" NOTE: {{{
" ====================  GENERAL INFO  ===============================
" :!col -b " to ignore the control characters
"
" gv    go back to previous visual selection
" va{   visual selection {
" di"   delete in "
"
" environment variables start w/ $ : ex. $HOME
" ab -- general abbreviation; ca -- command line mode abbreviation
" ca mkix   !makeindex
"
" ======================  PATTERN REGX  =============================
" :g/\<condition\>\%(\s\+number\>\)\@!/p
"
" Explanation of the pattern
"
"     \<              begin of word (don't match "precondition")
"     condition       matches itself
"     \>              end of word (don't match "conditional")
"     \%(             start subpattern
"     \s\+            any number of whitespace (at least one)
"     number          matches itself
"     \>              end of word ("condition numbering" is different)
"     \)              end subpattern
"     \@!             subpattern must NOT match
"
" :s/\([.0-9]*\s\+\)\{3}/&\r/g
"
"   &   matched pattern
"
" insert <CR> after pattern example: s/\(\S\+\s\+\)\{76}/\0\r/g
" :s/  / /g
" :s/\([.0-9]* \)\{76}/&\r/g    " after matching 76 times
" ===================================================================
" use \r to insert linebreak
"   /[(,)]
"   :s//\r&/g
" =======================  REGISTERS  ===============================
" : help registers
" '='   the expression register: you are prompted to
"       enter an expression (see |expression|)
"       Note that 0x80 (128 decimal) is used for
"       special keys.  E.g., you can use this to move
"       the cursor up:
"               CTRL-R ="\<Up>"
"       Use CTRL-R CTRL-R to insert text literally.
"       When the result is a |List| the items are used
"       as lines.  They can have line breaks inside
"       too.
"       When the result is a Float it's automatically
"       converted to a String.
" =================================================================== }}}
" vim: ts=4 sw=4 sts=4 et foldenable fdm=marker fmr={{{,}}} fdl=1
