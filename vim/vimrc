" =========================================================================
" =======================  GLOBAL SETTINGS  ===============================
" =========================================================================
" system-wide default configuration Vim
" set runtimepath=~/.vim,/usr/share/vim/@VIMCUR@,/usr/share/vim/vimfiles/after
" source /usr/share/vim/vimcurrent/syntax/syntax.vim
" ---- basic settings ---- {{{
filetype plugin indent on
syntax on

set mouse=
set tabstop=4       " hard tab
set shiftwidth=4    " shift width
set softtabstop=4   " soft tab stop
set expandtab       " use space instead
" set smarttab      " make tab insert indents
set ruler           " show the cursor position all the time
" set ignorecase
" set showcmd
" set nowrap

" auto indenting step (# of space)
":verbose set ai? cin? cink? cino? si? inde? indk?
"setlocal noautoindent
"setlocal nocindent
"setlocal nosmartindent
"setlocal indentexpr=
set ai              " auto indent
" set rnu!          " relativenumber

set showmode
set hlsearch
" disable hilight of searching using <Space> & clean command-line
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" --------- folding --------
" set foldmethod=marker foldmarker={{{,}}} foldlevel=1

" ------- clipboard --------
if has('clipboard')
    " set clipboard=unnamed,exclude:cons\|linux
    set clipboard=unnamed
endif

" ------- cursor line ------
highlight CursorLine   ctermbg=grey
" highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

" --------------------------
" autocmd BufEnter * set mouse=
" termcap: /etc/termcap (echo $TERMCAP)
" if &term =~ "xterm\\|rxvt"
" " use an orange cursor in insert mode
" let &t_SI = "\<Esc>]12;orange\x7"
" " use a red cursor otherwise
" let &t_EI = "\<Esc>]12;red\x7"
" silent !echo -ne "\033]12;red\007"
" " reset cursor when vim exits
" autocmd VimLeave * silent !echo -ne "\033]112\007"
" " use \003]12;gray\007 for gnome-terminal
" endif
" let &t_ve = "\<Esc>[34h\<Esc>[?25h"
" let &t_ve = "[34h[?25h"
" let &t_ve = "\<Esc>[34h\<Esc>[?25h"

" word / filename under cursor <cfile> <cword>
" -------- " The rest " --------
" variable 'iskeyword' is for searching/selection
" variable 'isfname' is for filename setting
" include '.' in searching, should depend on file type
" set iskeyword+=\.     " include .
" set iskeyword-=\.     " disable it
"
" iskeyword --> string : searching and reconizing --> \k (local to buffer)
" set isk=@,48-57,_,128-167,224-235
" set isk=@,48-57,_,192-255
" set isk=@,48-57,_,192-255,#       make
" set isk=@,48-57,_
" set isk=a-z,A-Z,48-57,_,.,-,>     C/C++
"
" set @,46-57,_,192-255             make (include /)

" FORMAT
":e ++ff=dos
":e ++ff=mac
":e ++ff=unix
":w ++ff=dos
":w ++ff=mac
":w ++ff=unix
":set fileformat=unix to convert from dos to unix
" =========================  VIM DIFF MODE  ===============================
" vimdiff/viewdiff mode {{{
" do    get change form the other
" dp    put change to the other
" ]c    next diff
" [c    prev diff
if &diff
    set scrollbind
else
endif " }}}
" }}}

function! RidSpace() " clean space {{{
    " Don't change tabs in Makefile
    if &filetype == 'make'
        " retab does not work for makefile
        " silent! exec '%s/\(.\)\t/\1    /g'
        " take a look at \@<!, retab
        " silent! exec '%s/\t/        /g'
        silent! exec '%s/\(^\)\@<!\t/    /g'
    else
        " retab     convert
        " retab!    convert them back
        " silent! exec '%s/\t/    /g'
        retab
    end
    silent! exec '%s/\s\+$//g'
    set foldlevel=0 foldenable
endfunction
" }}}
fu! CustomFoldText() " custom fold display {{{
    let line1 = getline(v:foldstart)
    let lineCnt = line("$")
    let w = winwidth(0) - &foldcolumn - (&number ? (strwidth(printf("%d", lineCnt)) + 2) : 0)
    let fldCnt = 1 + v:foldend - v:foldstart
    let fldStr = printf(" %d+%d %.1f%%", fldCnt, v:foldlevel, (fldCnt * 1.0) / lineCnt * 100)
    let expStr = repeat(".", w - strwidth(line1.fldStr))
    return strpart(line1, 0, w - strwidth(expStr.fldStr)).expStr.fldStr
endf " }}}
set foldtext=CustomFoldText()

" file support {{{
augroup filetype
    au BufRead,BufNewFile *akefile*     set filetype=make
    au BufRead,BufNewFile .*akefile*    set filetype=make
    au BufRead,BufNewFile *.rml         set filetype=rml
augroup END

" more file type
au BufNewFile,BufRead *.txt                     setf text

" -----------------------
" set up the help manuals
" -----------------------
au FileType vim,help let&l:kp=':help'
au FileType python   set kp=pydoc
au FileType tcl      set kp=man\ n             " GF DE tcl man is in 'n' section
au FileType c,cpp,h  set kp=man\ -S\ 3p:2:3    " programming manual pages 2, 3p, and 3 (3c:3)
au FileType perl     set kp=perldoc

au FileType text,tex,bib,mail,rml,pandoc set kp=sdcv "dict

" ------------------------------------
" indentation/tabs for different files
" ------------------------------------
au FileType c,cpp    set ts=2 sw=2

" Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif

autocmd Syntax c,cpp,tcl,xml    set foldmethod=marker
autocmd Syntax xml              syn match OotclComment "//.*"
autocmd Syntax xml              hi def link OotclComment Comment
" }}}
" =========================================================================
" =========================  KEYBINDING  ==================================
" =========================================================================
" nmap/normal, vmap/visual, smap/select, omap/operator-pending, imap/insert {{{
nmap <silent> Tc :tabnew<CR>
nmap <silent> Tn :tabnext<CR>
nmap <silent> Tp :tabprev<CR>
nmap t <C-w>

" for vim-instant-markdown
nmap TV :InstantMarkdownPreview<CR>
nmap Tv :InstantMarkdownStop<CR>

"nmap `

" insert date and time
" map <F2> a<C-R>=strftime("%c")<CR><Esc>
" map <F2> i<C-R>=strftime("%Y/%m%d")<CR><Esc>
" map <F3> :let @@=expand('<cword>')<CR> " copy to "
" map <F4> :let @+=expand('<cword>')<CR> " copy to selection

nnoremap <F2> :set invcursorcolumn invcursorline wrap! nu!<CR>

" nnoremap <F8> :setl noai nocin nosi inde=<CR>
nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>

" search the link
nnoremap <silent> <Tab> /\[[^\]]*\]([^)]*)<CR>

" Useful bubble text normal mapping for arrow keys.
"nnoremap <UP> ddkP
"nnoremap <DOWN> ddp

" vnoremap <DOWN> xjP`[<C-V>`]
" vnoremap <UP> xkP`[<C-V>`]
" vnoremap <LEFT> xhP`[<C-V>`]
" vnoremap <RIGHT> xlP`[<C-V>`]

" nnoremap <LEFT>  I
" nnoremap <RIGHT> A
" vnoremap <LEFT>  I
" vnoremap <RIGHT> A

" set fileencodings=big5,euc-jp,gbk,gb18030,utf-8,euc-kr,utf-bom,iso8859-1,default
" set encoding=utf8
" set tenc=utf8
" set tenc=big5<cr>
" http://linux-wiki.cn/wiki/zh-hant/%E7%AE%80%E7%B9%81%E8%BD%AC%E6%8D%A2 "Â∞áÊñáÂ≠óÁ∑®Á¢ºËΩâÊèõ"
" %!iconv -f big5 -t utf8
" %!cconv -f big5 -t utf8
vnoremap m :!cconv -f big5 -t utf8<CR>
vnoremap M :!cconv -f gb18030 -t utf8<CR>
" vnoremap H
" vnoremap L

" set shell ?       check the external command
" run the command in default shell (v-i) :'<,'>w !sh
vnoremap ` :w !sh<CR>
vnoremap t !column -t<CR>
vnoremap <silent> , :s/\s\+$//g<CR>
vnoremap f :s/\(\S\)\s\+/\1:/g<CR>
vnoremap F :s/:/ /g<CR>
" vnoremap a
" vnoremap i
vnoremap o :!/usr/bin/nl -n rz<CR>

nmap ; :!

" nnoremap <silent> = :call RidSpace()<CR>
nnoremap <silent> , :call RidSpace()<CR>
" }}}
" =========================================================================
" ========================  LOCAL SETTINGS  ===============================
" =========================================================================
set encoding=utf-8
set nocompatible              " be iMproved, required
" set shellcmdflag=-c
" neocomlete https://github.com/Shougo/neocomplete.vim
let g:neocomplete#enable_at_startup = 1
au WinLeave * hi StatusLine ctermfg=darkgrey
au WinEnter * hi StatusLine ctermfg=green
" au WinEnter * hi StatusLine ctermfg=cyan
" =======================  PLUGINS SETTINGS  ==============================
" ----- " vundle " ----- {{{ plugin manager: need vim reload
if has('nvim')
    let g:VCFGHOME = $HOME."/.config/nvim/bundle/Vundle.vim"
else
    let g:VCFGHOME = $HOME."/.vim/bundle/Vundle.vim"
endif
" https://github.com/VundleVim/Vundle.vim " create ~/.vim/bundle/ folder
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
filetype off " required
if filereadable(g:VCFGHOME."/README.md")

if has('nvim')
    set rtp+=~/.config/nvim/bundle/Vundle.vim
else
    set rtp+=~/.vim/bundle/Vundle.vim
end
call vundle#begin() " {{{
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')
" Keep Plugin commands between vundle#begin/end.

" plugin on GitHub repo " let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
" Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'

" https://github.com/vim-pandoc/vim-pandoc
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'


Plugin 'suan/vim-instant-markdown', {'rtp': 'after'}


" vimwiki <-- markdown
" Plugin 'vimwiki/vimwiki'

" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'} " sparkup script is in a subdirectory
" Plugin 'ascenator/L9', {'name': 'newL9'} " Install L9 and avoid a Naming conflict

" Plugin 'git://git.wincent.com/command-t.git'
" Plugin 'file:///home/gmarik/path/to/plugin' " git repos on local machine
call vundle#end() " }}}

" --- " vimwiki " --- {{{
" default file @ ~/vimwiki/index.wiki
" markdown '='
" let g:vimwiki_key_mappings =
" \ {
" \ 'headers': 0,
" \ }
" folding expr is better than syntax
" let g:vimwiki_folding = 'syntax'
" let g:vimwiki_folding = 'expr'
" au FileType vimwiki set filetype=vimwiki.markdown
"  }}}

" --- " instant-markdown " --- {{{
" InstantMarkdownPreview
" InstantMarkdownStop
"let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0
"let g:instant_markdown_open_to_the_world = 1
"let g:instant_markdown_allow_unsafe_content = 1
"let g:instant_markdown_allow_external_content = 0
let g:instant_markdown_mathjax = 1
"let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
let g:instant_markdown_autoscroll = 0
"let g:instant_markdown_port = 8090
"let g:instant_markdown_python = 1
" }}}

" --- " pandoc " --- {{{
" :Pandoc [option]*
" let g:pad#dir = "~/documents/notes"
" let g:pad#local_dir = "notes"
" let g:pandoc#after#modules#enabled = ["nrrwrgn", "ultisnips"]
" let g:pandoc#syntax#codeblocks#embeds#langs = ["ruby", "literatehaskell=lhaskell", "bash=sh"]
let g:pandoc#syntax#codeblocks#embeds#langs = ["lua", "cpp", "bash=sh", "vim", "make", "html", "sql", "java"]
let g:pandoc#spell#enabled = 1
" let g:pandoc#folding#mode = ["expr"]
" let g:pandoc#folding#mode = "syntax"
let g:pandoc#folding#fold_fenced_codeblocks = 1
" let g:pandoc#folding#fold_vim_markers = 1
" let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
" let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#modules#enabled = ["formatting", "folding"]
" let g:pandoc#formatting#mode = "h"
" }}}

" --- " tagbar " --- {{{
" let g:tagbar_ctags_bin = 'ctags'   "ctags Á®ãÂ∫èÁöÑË∑ØÂæÑ
" let g:tagbar_width = 30            "Á™óÂè£ÂÆΩÂ∫¶ËÆæÁΩÆ‰∏∫ 30
let g:tagbar_width = 28            "Á™óÂè£ÂÆΩÂ∫¶ËÆæÁΩÆ‰∏∫ 30
let g:tagbar_left = 0              "ËÆæÁΩÆÂú® vim Â∑¶ËæπÊòæÁ§∫
" let g:tagbar_map_openfold = "zv"   "Êåâ zv ÁªÑÂêàÈîÆÊâìÂºÄÊ†áÁ≠æÔºåÈªòËÆ§ zc ÂÖ≥Èó≠Ê†áÁ≠æ
" let g:tagbar_zoomwidth = NERDTreeWinSizeMax
" let g:tagbar_vertical = winheight(0)/2
" ---
" let g:tagbar_autofocus = 0
" let g:tagbar_autoclose = 0
" let g:tagbar_sort = 1
" let g:tagbar_compact = 0
" let g:tagbar_expand = 0
" let g:tagbar_singleclick = 0
" let g:tagbar_foldlevel = 99
" let g:tagbar_autoshowtag = 0
" let g:tagbar_updateonsave_maxlines = 5000
" let g:tagbar_systemenc = &encoding
" if !exists('g:tagbar_iconchars')
"     if has('multi_byte') && has('unix') && &encoding == 'utf-8' &&
"         \ (empty(&termencoding) || &termencoding == 'utf-8')
"         let g:tagbar_iconchars = ['‚ñ∂', '‚ñº']
"     else
"         let g:tagbar_iconchars = ['+', '-']
"     endif
" endif
" augroup TagbarSession
"     autocmd!
"     autocmd SessionLoadPost * nested call tagbar#RestoreSession()
" augroup END
" " Commands
" command! -nargs=0 TagbarToggle              call tagbar#ToggleWindow()
" command! -nargs=? TagbarOpen                call tagbar#OpenWindow(<f-args>)
" command! -nargs=0 TagbarOpenAutoClose       call tagbar#OpenWindow('fc')
" command! -nargs=0 TagbarClose               call tagbar#CloseWindow()
" command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)
" command! -nargs=0 TagbarShowTag             call tagbar#OpenParents()
" command! -nargs=1 TagbarGetTypeConfig       call tagbar#gettypeconfig(<f-args>)
" command! -nargs=? TagbarDebug               call tagbar#StartDebug(<f-args>)
" command! -nargs=0 TagbarDebugEnd            call tagbar#StopDebug()
" }}}

endif
filetype plugin indent on    " or 'filetype plugin on'
" --- Brief help ---
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ
" }}}
" =========================================================================
" ----- " IDE " ----- {{{ vundle/tagbar

" ----- "netrw" -----
let g:netrw_dirhistmax = 0
" let g:netrw_altv = 0
" let g:netrw_banner = 0
" let g:netrw_browse_split = 2
" let g:netrw_liststyle = 1
" let g:netrw_winsize = 24
" let g:netrw_list_hide = '.*\.swp$'

autocmd StdinReadPre * let s:std_in = 1

" ----- "deoplete" -----
" let g:deoplete#enable_at_startup = 1

" ----- " ctags " -----
let g:tagbar_ctags_bin = "/usr/bin/ctags"
" ------------------- " new-omni-completion " ------------------- {{{
" insert mode:
"   c-x c-o --> ?
"   c-x c-i --> function/variable name
"   c-x c-f --> directory
"   ^X..... (^I:insert, ^L:library)
set completeopt=longest,menu
"   c-p ?
" NeoCompleteToggle
" }}}

" markdown
" au FileType md       :NeoCompleteDisable<CR>

" }}}
" =========================================================================
" ----- " Spell " ----- {{{
" [s    search back
" ]s    search forth
" zg    add word under cursor
" set spell spelllang=en_us
set spellfile=~/.vim/spell/en.utf-8.add

" set nospell
" language setting en or fr
" set spelllang=fr
" }}}
" =========================================================================
" ----- " Color " ----- {{{
set background=dark   " dark/light

" ref: http://http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
" set t_Co=256
" if (&t_Co == 256 || &t_Co == 88) && !has('gui_running') &&
"   \ filereadable(expand("$HOME/.vim/plugin/guicolorscheme.vim"))
"   runtime! plugin/guicolorscheme.vim
"   GuiColorScheme rastafari
" else
"   colorscheme rastafari
" endif
if (&t_Co == 256) " rxvt-unicode-256color
    hi comment ctermfg=242 ctermbg=black guifg=darkgray gui=bold
else " colorscheme evening
    " hi Comment term=bold cterm=NONE ctermfg=Cyan ctermbg=Blue gui=NONE guifg=Blue guibg=NONE
    hi comment ctermfg=darkblue ctermbg=black guifg=gray gui=bold
endif

" if &term =~ "xterm"
" endif

highlight Folded term=bold ctermbg=blue ctermfg=cyan guibg=grey guifg=blue
highlight FoldColumn guibg=darkgrey guifg=white
" }}}

set foldenable
" NOTE: {{{
" =======================  GENERAL INFO  ==================================
" vim --version      to check compiled feature
"
" === TABLE MODE ===
" col -b " to ignore the control characters
"
" gv    go back to previous visual selection
" c-wf  open a new window for the file under cursor
" va{   visual selection {
" di"   delete in "
"
" environment variables start w/ $ : ex. $HOME
" ab -- general abbreviation; ca -- command line mode abbreviation
" ca mkix   !makeindex
"
" =======================  PATTERN REGX  ==================================
" :g/\<condition\>\%(\s\+number\>\)\@!/p
"
" Explanation of the pattern
"
"     \<              begin of word (don't match "precondition")
"     condition       matches itself
"     \>              end of word (don't match "conditional")
"     \%(             start subpattern
"     \s\+            any number of whitespace (at least one)
"     number          matches itself
"     \>              end of word ("condition numbering" is different)
"     \)              end subpattern
"     \@!             subpattern must NOT match
"
" :s/\([.0-9]*\s\+\)\{3}/&\r/g
"
"   &   matched pattern
"
" insert <CR> after pattern example: s/\(\S\+\s\+\)\{76}/\0\r/g
" :s/  / /g
" :s/\([.0-9]* \)\{76}/&\r/g    " after matching 76 times
"
" =========================================================================
" use \r to insert linebreak
"   /[(,)]
"   :s//\r&/g
"
" ========================  REGISTERS  ====================================
" NB:
" : help marks
" : help clipboard
" : help registers
" '='   the expression register: you are prompted to
"       enter an expression (see |expression|)
"       Note that 0x80 (128 decimal) is used for
"       special keys.  E.g., you can use this to move
"       the cursor up:
"               CTRL-R ="\<Up>"
"       Use CTRL-R CTRL-R to insert text literally.
"       When the result is a |List| the items are used
"       as lines.  They can have line breaks inside
"       too.
"       When the result is a Float it's automatically
"       converted to a String.
" ========================================================================= }}}
" =========================================================================
" vim: ts=4 sw=4 sts=4 et foldenable fdm=marker fmr={{{,}}} fdl=1
