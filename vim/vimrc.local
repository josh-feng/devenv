" =========================================================================
" =======================  GLOBAL SETTINGS  ===============================
" =========================================================================
" Debian system-wide default configuration Vim
" set runtimepath=~/.vim,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/@VIMCUR@,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after

" source /usr/share/vim/vimcurrent/syntax/syntax.vim
" source /usr/share/vim/vimcurrent/ftplugin/man.vim
" =========================================================================
" ---- basic settings ---- {{{
filetype plugin on
filetype indent on
syntax on

set mouse=
set tabstop=4       " hard tab
set shiftwidth=4    " shift width
set softtabstop=4   " soft tab stop
set expandtab       " use space instead
" set smarttab      " make tab insert indents
set ruler           " show the cursor position all the time
" set ignorecase
" set showcmd
" set nowrap

" auto indenting step (# of space)
":verbose set ai? cin? cink? cino? si? inde? indk?
"setlocal noautoindent
"setlocal nocindent
"setlocal nosmartindent
"setlocal indentexpr=
set ai              " auto indent
" set rnu!          " relativenumber

set showmode
set hlsearch
" disable hilight of searching using <Space> & clean command-line
nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

" ------- " folding " -------
set foldmethod=marker foldmarker={{{,}}} foldlevel=1

" ------- clipboard --------
if has('clipboard')
    set clipboard=unnamed,exclude:cons\|linux
    " set clipboard=unnamedplus,exclude:cons\|linux
    " set clipboard=exclude:cons\|linux
endif

" ------- cursor line ------
highlight CursorLine   ctermbg=grey
" highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

" =========================================================================
" autocmd BufEnter * set mouse=
" termcap: /etc/termcap (echo $TERMCAP)
" if &term =~ "xterm\\|rxvt"
" " use an orange cursor in insert mode
" let &t_SI = "\<Esc>]12;orange\x7"
" " use a red cursor otherwise
" let &t_EI = "\<Esc>]12;red\x7"
" silent !echo -ne "\033]12;red\007"
" " reset cursor when vim exits
" autocmd VimLeave * silent !echo -ne "\033]112\007"
" " use \003]12;gray\007 for gnome-terminal
" endif
" let &t_ve = "\<Esc>[34h\<Esc>[?25h"
" let &t_ve = "[34h[?25h"
" let &t_ve = "\<Esc>[34h\<Esc>[?25h"
" }}}

" word / filename under cursor {{{ <cfile> <cword>
" -------- " The rest " --------
" variable 'iskeyword' is for searching/selection
" variable 'isfname' is for filename setting
" include '.' in searching, should depend on file type
" set iskeyword+=\.     " include .
" set iskeyword-=\.     " disable it
"
" iskeyword --> string : searching and reconizing --> \k (local to buffer)
" set isk=@,48-57,_,128-167,224-235
" set isk=@,48-57,_,192-255
" set isk=@,48-57,_,192-255,#       make
" set isk=@,48-57,_
" set isk=a-z,A-Z,48-57,_,.,-,>     C/C++
"
" set @,46-57,_,192-255             make (include /)
" }}}

" file support {{{
augroup filetype
    au BufRead,BufNewFile *.rules,*.rul set filetype=calibre
    au BufRead,BufNewFile *.tech,*.svrf set filetype=calibre
    au BufRead,BufNewFile *.job,*lua    set filetype=tachyon
    au BufRead,BufNewFile *akefile*     set filetype=make
    au BufRead,BufNewFile .*akefile*    set filetype=make
    au BufRead,BufNewFile *.rml         set filetype=rml
augroup END

" more file type
au BufNewFile,BufRead *.txt                     setf text

" -----------------------
" set up the help manuals
" -----------------------
au FileType vim,help let&l:kp=':help'
au FileType python   set kp=pydoc
au FileType tcl      set kp=man\ n             " GF DE tcl man is in 'n' section
au FileType c,cpp,h  set kp=man\ -S\ 3p:2:3    " programming manual pages 2, 3p, and 3 (3c:3)
au FileType perl     set kp=perldoc

au FileType text,tex,bib,mail,rml set kp=sdcv "dict

" ------------------------------------
" indentation/tabs for different files
" ------------------------------------
au FileType c,cpp    set ts=2 sw=2

" Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif

autocmd Syntax c,cpp,tcl,xml    set foldmethod=marker
autocmd Syntax xml              syn match OotclComment "//.*"
autocmd Syntax xml              hi def link OotclComment Comment

" FORMAT
":e ++ff=dos
":e ++ff=mac
":e ++ff=unix
":w ++ff=dos
":w ++ff=mac
":w ++ff=unix
":set fileformat=unix to convert from dos to unix
" }}}
" =========================  VIM DIFF MODE  ===============================
" vimdiff/viewdiff mode {{{
" do    get change form the other
" dp    put change to the other
" ]c    next diff
" [c    prev diff
if &diff
    set scrollbind
else
endif " }}}
" =========================================================================
" =========================  KEYBINDING  ==================================
" =========================================================================
" nmap/normal, vmap/visual, smap/select, omap/operator-pending, imap/insert {{{
nmap Tc :tabnew<CR>
nmap Tn :tabnext<CR>
nmap Tp :tabprev<CR>
nmap t <C-w>

"nmap `

" insert date and time
" map <F2> a<C-R>=strftime("%c")<CR><Esc>
" map <F2> i<C-R>=strftime("%Y/%m%d")<CR><Esc>
" map <F3> :let @@=expand('<cword>')<CR> " copy to "
" map <F4> :let @+=expand('<cword>')<CR> " copy to selection

nnoremap <F2> :set invcursorcolumn invcursorline wrap! nu!<CR>

" nnoremap <F8> :setl noai nocin nosi inde=<CR>
nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>

" Useful bubble text normal mapping for arrow keys.
"nnoremap <UP> ddkP
"nnoremap <DOWN> ddp

" vnoremap <DOWN> xjP`[<C-V>`]
" vnoremap <UP> xkP`[<C-V>`]
" vnoremap <LEFT> xhP`[<C-V>`]
" vnoremap <RIGHT> xlP`[<C-V>`]

" nnoremap <LEFT>  I
" nnoremap <RIGHT> A
" vnoremap <LEFT>  I
" vnoremap <RIGHT> A

" set fileencodings=big5,euc-jp,gbk,gb18030,utf-8,euc-kr,utf-bom,iso8859-1,default
" set encoding=utf8
" set tenc=utf8
" set tenc=big5<cr>
" http://linux-wiki.cn/wiki/zh-hant/%E7%AE%80%E7%B9%81%E8%BD%AC%E6%8D%A2 "Â∞áÊñáÂ≠óÁ∑®Á¢ºËΩâÊèõ"
" %!iconv -f big5 -t utf8
" %!cconv -f big5 -t utf8
vnoremap m :!cconv -f big5 -t utf8<CR>
vnoremap M :!cconv -f gb18030 -t utf8<CR>
" vnoremap H
" vnoremap L

" set shell ?       check the external command
" run the command in default shell (v-i) :'<,'>w !sh
vnoremap ` :w !sh<CR>
vnoremap t !column -t<CR>
vnoremap <silent> , :s/\s\+$//g<CR>
vnoremap f :s/\(\S\)\s\+/\1:/g<CR>
vnoremap F :s/:/ /g<CR>
" vnoremap a
" vnoremap i
vnoremap o :!/usr/bin/nl -n rz<CR>

nmap ; :!
" }}}

function! RidSpace() " clean space {{{
    " Don't change tabs in Makefile
    if &filetype == 'make'
        " retab does not work for makefile
        " silent! exec '%s/\(.\)\t/\1    /g'
        " take a look at \@<!, retab
        " silent! exec '%s/\t/        /g'
        silent! exec '%s/\(^\)\@<!\t/    /g'
    else
        " retab     convert
        " retab!    convert them back
        " silent! exec '%s/\t/    /g'
        retab
    end
    silent! exec '%s/\s\+$//g'
    set foldlevel=0 foldenable
endfunction
nnoremap <silent> = :call RidSpace()<CR>
" }}}
fu! CustomFoldText() " custom fold display {{{
    let line1 = getline(v:foldstart)
    let lineCnt = line("$")
    let w = winwidth(0) - &foldcolumn - (&number ? (strwidth(printf("%d", lineCnt)) + 2) : 0)
    let fldCnt = 1 + v:foldend - v:foldstart
    let fldStr = printf(" %d+%d %.1f%%", fldCnt, v:foldlevel, (fldCnt * 1.0) / lineCnt * 100)
    let expStr = repeat(".", w - strwidth(line1.fldStr))
    return strpart(line1, 0, w - strwidth(expStr.fldStr)).expStr.fldStr
endf
set foldtext=CustomFoldText() " }}}
" =========================================================================
" NOTE: {{{
" =======================  GENERAL INFO  ==================================
" vim --version      to check compiled feature
"
" === TABLE MODE ===
" col -b " to ignore the control characters
"
" gv    go back to previous visual selection
" c-wf  open a new window for the file under cursor
" va{   visual selection {
" di"   delete in "
"
" environment variables start w/ $ : ex. $HOME
" ab -- general abbreviation; ca -- command line mode abbreviation
" ca mkix   !makeindex
"
" =======================  PATTERN REGX  ==================================
" :g/\<condition\>\%(\s\+number\>\)\@!/p
"
" Explanation of the pattern
"
"     \<              begin of word (don't match "precondition")
"     condition       matches itself
"     \>              end of word (don't match "conditional")
"     \%(             start subpattern
"     \s\+            any number of whitespace (at least one)
"     number          matches itself
"     \>              end of word ("condition numbering" is different)
"     \)              end subpattern
"     \@!             subpattern must NOT match
"
" :s/\([.0-9]*\s\+\)\{3}/&\r/g
"
"   &   matched pattern
"
" insert <CR> after pattern example: s/\(\S\+\s\+\)\{76}/\0\r/g
" :s/  / /g
" :s/\([.0-9]* \)\{76}/&\r/g    " after matching 76 times
"
" =========================================================================
" use \r to insert linebreak
"   /[(,)]
"   :s//\r&/g
"
" ========================  REGISTERS  ====================================
" NB:
" : help marks
" : help clipboard
" : help registers
" '='   the expression register: you are prompted to
"       enter an expression (see |expression|)
"       Note that 0x80 (128 decimal) is used for
"       special keys.  E.g., you can use this to move
"       the cursor up:
"               CTRL-R ="\<Up>"
"       Use CTRL-R CTRL-R to insert text literally.
"       When the result is a |List| the items are used
"       as lines.  They can have line breaks inside
"       too.
"       When the result is a Float it's automatically
"       converted to a String.
" =========================================================================
" vim: ts=4 sw=4 sts=4 et foldenable fdm=marker fmr={{{,}}} fdl=1
